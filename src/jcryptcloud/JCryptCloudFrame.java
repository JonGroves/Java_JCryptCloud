/*
 * Copyright (C) 2014 Jonathan
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jcryptcloud;

import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.ImageIcon;

/**
 *
 * @author Jonathan
 */
public class JCryptCloudFrame extends javax.swing.JFrame {

    
    Preferences userPreferences;   //Stores all saved information for this program
    boolean passwordFieldEdited;   //Stores if the password form has been clicked and cleared
    /**
     * Creates new form JCryptCloudFrame
     */
    public JCryptCloudFrame() {
        initComponents();
        myinitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextFieldEncryptedFolderPath = new javax.swing.JTextField();
        jLabelLockedIcon1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jTextFieldUnencryptedFolderPath = new javax.swing.JTextField();
        jLabelUnlockedIcon = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPasswordField1 = new javax.swing.JPasswordField();
        jPanel3 = new javax.swing.JPanel();
        jToggleButtonKeepDecrypted = new javax.swing.JToggleButton();
        jToggleButtonKeepEncrypted = new javax.swing.JToggleButton();
        jButtonEncrypt = new javax.swing.JButton();
        jButtonDecrypt = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaStatus = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Encrypted Folder"));

        jTextFieldEncryptedFolderPath.setText("Click to change");
        jTextFieldEncryptedFolderPath.setToolTipText("");
        jTextFieldEncryptedFolderPath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldEncryptedFolderPathMouseClicked(evt);
            }
        });

        jLabelLockedIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jcryptcloud/res/Locked16x16.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabelLockedIcon1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldEncryptedFolderPath))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextFieldEncryptedFolderPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabelLockedIcon1)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Unencrypted Folder"));

        jTextFieldUnencryptedFolderPath.setText("Click to change");
        jTextFieldUnencryptedFolderPath.setToolTipText("");
        jTextFieldUnencryptedFolderPath.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldUnencryptedFolderPathMouseClicked(evt);
            }
        });

        jLabelUnlockedIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jcryptcloud/res/Unlocked16x16.png"))); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jLabelUnlockedIcon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldUnencryptedFolderPath))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldUnencryptedFolderPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabelUnlockedIcon))
        );

        jTextFieldUnencryptedFolderPath.getAccessibleContext().setAccessibleName("");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Password"));

        jCheckBox1.setText("Show Password");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jPasswordField1.setText("Click to Set Password");
        jPasswordField1.setEchoChar((char)0);
        jPasswordField1.setName(""); // NOI18N
        jPasswordField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPasswordField1MouseClicked(evt);
            }
        });
        jPasswordField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPasswordField1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jCheckBox1)
                .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Syncs"));

        jToggleButtonKeepDecrypted.setText("Keep Decrypted");
        jToggleButtonKeepDecrypted.setEnabled(false);
        jToggleButtonKeepDecrypted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonKeepDecryptedActionPerformed(evt);
            }
        });

        jToggleButtonKeepEncrypted.setText("Keep Encrypted");
        jToggleButtonKeepEncrypted.setEnabled(false);
        jToggleButtonKeepEncrypted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonKeepEncryptedActionPerformed(evt);
            }
        });

        jButtonEncrypt.setText("Encrypt Once");
        jButtonEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEncryptActionPerformed(evt);
            }
        });

        jButtonDecrypt.setText("Decrypt Once");
        jButtonDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDecryptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jButtonEncrypt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDecrypt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addComponent(jToggleButtonKeepEncrypted)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonKeepDecrypted))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jToggleButtonKeepDecrypted)
                .addComponent(jToggleButtonKeepEncrypted)
                .addComponent(jButtonEncrypt)
                .addComponent(jButtonDecrypt))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));
        jPanel6.setPreferredSize(new java.awt.Dimension(600, 600));

        jTextAreaStatus.setColumns(10);
        jTextAreaStatus.setFont(new java.awt.Font("Monospaced", 0, 10)); // NOI18N
        jTextAreaStatus.setRows(5);
        jScrollPane1.setViewportView(jTextAreaStatus);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Initialize other variables, components, etc
    private void myinitComponents()
    {
        userPreferences  = Preferences.userRoot();  //Get user's preferences and saved form information
        jTextFieldEncryptedFolderPath.setText(userPreferences.get("EncryptedFolderPath", "Click to Select Encrypted Folder"));  //Set the folder path, if it was set before.  Else, default to "Click to..."
        jTextFieldUnencryptedFolderPath.setText(userPreferences.get("UnencryptedFolderPath", "Click to Select Unencrypted Folder")); //Set the folder path, if it was set before.  Else, default to "Click to..."
        passwordFieldEdited = false;  //Initialises that the password field has not been clicked yet
        
        //Load and set the form's icon
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("res/Locked256x256.png")));

        //userPreferences.remove("EncryptedFolderPath");  //For testing what happens when the folder has never been selected before
        //userPreferences.remove("UnencryptedFolderPath");  //For testing what happens when the folder has never been selected before       
    }
    private void jToggleButtonKeepDecryptedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonKeepDecryptedActionPerformed

    }//GEN-LAST:event_jToggleButtonKeepDecryptedActionPerformed

    private void jToggleButtonKeepEncryptedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonKeepEncryptedActionPerformed

    }//GEN-LAST:event_jToggleButtonKeepEncryptedActionPerformed

    private void jButtonEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEncryptActionPerformed
        //  This method encrypts the files that are in the unencrypted folder into the encrypted folder
        
        // Get the encrypted and unencrypted folder paths
        File unencryptedFolder = new File(jTextFieldUnencryptedFolderPath.getText());
        File encryptedFolder = new File(jTextFieldEncryptedFolderPath.getText());

        try {
            /*
             File unencryptedFiles[] = unencyptedFolder.listFiles(new FileFilter() {
             @Override
             public boolean accept(File pathname) {
             String name = pathname.getName().toLowerCase();
             return pathname.isFile();
             }
             });
             */
            Files.walk(Paths.get(unencryptedFolder.toString())).forEach(filePath -> {
                if (Files.isRegularFile(filePath)) {
                    //for (File unencryptedFile : unencryptedFiles) {
                    jTextAreaStatus.append("Filename to Encrypt: " + filePath.toString() + "\n");

                    //Start Encrypting (See http://sevenzip.sourceforge.jp/chm/cmdline/syntax.htm for details)
                    // a = add
                    // p = password
                    String password = jPasswordField1.getText(); //Get Password
                    String unencryptedFilePath = filePath.toString(); //Get path of file in the unecrypted folder
                    //Sets up the ecrypted file path by taking the unencrypted file path, and replacing the decryptedfolderpath with the encryptedfolderpath
                    //Note: Uses replace to prevent double-slashes being replaced with single slashes in replacefirst
                    String encryptedFilePath = unencryptedFilePath.replaceFirst(unencryptedFolder.toString().replace("\\", "\\\\"), encryptedFolder.getPath().toString().replace("\\", "\\\\")) + ".7z";

                    String commandLineString = "\"C:\\Program Files\\7-Zip\\7z.exe\" a -p" + password + " \"" + encryptedFilePath + "\" \"" + unencryptedFilePath + "\""; //Sets up command for shell to run for encrypting via 7zip
                    jTextAreaStatus.append(" Running Command: " + commandLineString + "\n");

                    //Run the decrypt process using 7zip
                    Runtime rt = Runtime.getRuntime();
                    try {
                        jTextAreaStatus.append(commandLineString + "\n");
                        //if (encryptedFilePath.contains(encryptedFolder.toString())) {  //A final check to make sure we are only writing to the encrypted folder
                        Process pr = rt.exec(commandLineString);    //Run a process to encrypt the file using 7zip
                        //} else {
                        //throw Error("File was going to be written outside of the encryptedFilePath, but was stopped.  Sorry!");
                        //}

                    } catch (IOException ex) {
                    }
                    jTextAreaStatus.append(" Successfully Completed" + "\n");
                }
            });
        } catch (IOException ex) {
            Logger.getLogger(JCryptCloudFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonEncryptActionPerformed

    private void jButtonDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecryptActionPerformed
        //  This method decrypts the files that are in the encrypted folder to the unencrypted folder
        
        // Get the encrypted and unencrypted folder paths
        File unencryptedFolder = new File(jTextFieldUnencryptedFolderPath.getText());
        File encryptedFolder = new File(jTextFieldEncryptedFolderPath.getText());

        try {
            //Paths.get(encryptedFolder.toString();

            Files.walk(Paths.get(encryptedFolder.toString())).forEach(filePath -> {
                if (Files.isRegularFile(filePath)) {
                    jTextAreaStatus.append("Filename to Unencrypt: " + filePath.toString() + "\n");

                    //Start Unencrypting (See http://sevenzip.sourceforge.jp/chm/cmdline/syntax.htm for details)
                    // e = extract
                    // p = password
                    // aoa = replace all files without asking
                    String password = jPasswordField1.getText(); //Get Password
                    String encryptedFilePath = filePath.toString(); //Get path of file in the encrypted folder (Note: May not actually be an encrypted file)
                    String encryptedFilePathFileExtension = filePath.getFileName().toString().substring(filePath.getFileName().toString().length() - 3); //Get file extension of file
                    if (encryptedFilePathFileExtension.equals(".7z")) { //if file has .7z extension (likely zipped and encrypted using this program)
                        //Sets up the unencrypted file path by taking the encrypted file path, and replacing the encryptedfolderpath with the unencryptedfolderpath
                        //Note: Uses replace to prevent double-slashes being replaced with single slashes in replacefirst
                        String unencryptedFolderPath = encryptedFilePath.replaceFirst(encryptedFolder.toString().replace("\\", "\\\\"), unencryptedFolder.getPath().replace("\\", "\\\\"));
                        unencryptedFolderPath = unencryptedFolderPath.substring(0, unencryptedFolderPath.length() - filePath.getFileName().toString().length() - 1); //Remove the full filename and final slash from unencryptedFilePath
                        String commandLineString = "\"C:\\Program Files\\7-Zip\\7z.exe\" e -p" + password + " \"" + encryptedFilePath + "\"" + " -o\"" + unencryptedFolderPath + "\" -aoa"; //Sets up command for shell to run for unencrypting via 7zip

                        jTextAreaStatus.append(" Running Command: " + commandLineString + "\n");

                        //Run the decrypt process using 7zip
                        Runtime rt = Runtime.getRuntime();
                        try {
                            jTextAreaStatus.append(commandLineString + "\n");
                            //if (encryptedFilePath.contains(encryptedFolder.toString())) {  //A final check to make sure we are only writing to the encrypted folder
                            Process pr = rt.exec(commandLineString);    //Run a process to encrypt the file using 7zip
                            //} else {
                            //throw Error("File was going to be written outside of the encryptedFilePath, but was stopped.  Sorry!");
                            //}
                        } catch (IOException ex) {
                            Logger.getLogger(JCryptCloudFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        jTextAreaStatus.append(" Successfully Completed" + "\n");
                    } else {
                        jTextAreaStatus.append(filePath.toString() + " was not decrypted since it was not a .7z file.\n");
                    }
                }
            });
        } catch (IOException ex) {
            Logger.getLogger(JCryptCloudFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonDecryptActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (jCheckBox1.isSelected()) { //If "Show Password" is checked
            this.jPasswordField1.setEchoChar((char)0); //Remove password masking
        } else {
            this.jPasswordField1.setEchoChar('*');
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jTextFieldUnencryptedFolderPathMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldUnencryptedFolderPathMouseClicked
        
        //Presents the user with a form to select a folder for the unencrypted folder path 
        JFolderSelectorDialog unencryptedFileChooser = new JFolderSelectorDialog(this, true);   //Sets up a dialog as modal to this frame.  Send variable that will hold the selected folder path.
        unencryptedFileChooser.setTitle("Select Unencrypted Folder");
        unencryptedFileChooser.setFolder(userPreferences.get("UnecryptedFolderPath", Paths.get("").toString()));
        unencryptedFileChooser.setVisible(true);
        jTextFieldUnencryptedFolderPath.setText(unencryptedFileChooser.getSelectedfolder()); //Stores the selected folder into the textbox on the main form for viewing and later use
        userPreferences.put("UnencryptedFolderPath", jTextFieldUnencryptedFolderPath.getText()); //Stores the selected folder for the next time the program is run to prevent reselecting it every time
    }//GEN-LAST:event_jTextFieldUnencryptedFolderPathMouseClicked

    private void jTextFieldEncryptedFolderPathMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldEncryptedFolderPathMouseClicked
        //Presents the user with a form to select a folder for the encrypted folder path
        JFolderSelectorDialog encryptedFileChooser = new JFolderSelectorDialog(this, true);   //Sets up a dialog as modal to this frame.  Send variable that will hold the selected folder path.
        encryptedFileChooser.setTitle("Select Encrypted Folder");
        encryptedFileChooser.setFolder(userPreferences.get("EncryptedFolderPath", Paths.get("").toString()));
        encryptedFileChooser.setVisible(true);
        jTextFieldEncryptedFolderPath.setText(encryptedFileChooser.getSelectedfolder()); //Stores the selected folder into the textbox on the main form for viewing and later use
        userPreferences.put("EncryptedFolderPath", jTextFieldEncryptedFolderPath.getText()); //Stores the selected folder for the next time the program is run to prevent reselecting it every time
    }//GEN-LAST:event_jTextFieldEncryptedFolderPathMouseClicked

    private void jPasswordField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPasswordField1MouseClicked
        if (!passwordFieldEdited) //Only erase password on initial click
        {
            jPasswordField1.setText(""); //Clears the text from the password field
            jPasswordField1.setEchoChar('*');   //turns on masking * in the password field
            passwordFieldEdited = true;
        }
    }//GEN-LAST:event_jPasswordField1MouseClicked

    private void jPasswordField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPasswordField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JCryptCloudFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JCryptCloudFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JCryptCloudFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JCryptCloudFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JCryptCloudFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDecrypt;
    private javax.swing.JButton jButtonEncrypt;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabelLockedIcon1;
    private javax.swing.JLabel jLabelUnlockedIcon;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaStatus;
    private javax.swing.JTextField jTextFieldEncryptedFolderPath;
    private javax.swing.JTextField jTextFieldUnencryptedFolderPath;
    private javax.swing.JToggleButton jToggleButtonKeepDecrypted;
    private javax.swing.JToggleButton jToggleButtonKeepEncrypted;
    // End of variables declaration//GEN-END:variables
}
